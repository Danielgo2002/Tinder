import { useStyles, chakra, forwardRef as forwardRef$1, useMultiStyleConfig, omitThemingProps, StylesProvider } from '@chakra-ui/system';
import { Collapse } from '@chakra-ui/transition';
import { dataAttr, cx } from '@chakra-ui/utils';
import { motion, AnimatePresence } from 'framer-motion';
import React__default, { useContext, createContext, useState, createElement, memo, useMemo, createRef, useEffect, Fragment, Children, isValidElement, cloneElement } from 'react';
import { forwardRef, useStyles as useStyles$1, Spinner, Flex, chakra as chakra$1, useMediaQuery } from '@chakra-ui/react';
import { mode, anatomy, darken, lighten } from '@chakra-ui/theme-tools';
import { createIcon } from '@chakra-ui/icon';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var StepsContext = /*#__PURE__*/createContext({
  activeStep: 0
});
var useStepsContext = function useStepsContext() {
  return useContext(StepsContext);
};
var StepsProvider = function StepsProvider(_ref) {
  var value = _ref.value,
      children = _ref.children;

  var _React$useState = useState([]),
      widths = _React$useState[0],
      setWidths = _React$useState[1];

  var isError = value.state === 'error';
  var isLoading = value.state === 'loading';
  var isVertical = value.orientation === 'vertical';
  var isLabelVertical = value.orientation !== 'vertical' && value.labelOrientation === 'vertical';
  return createElement(StepsContext.Provider, {
    value: _extends({}, value, {
      widths: widths,
      setWidths: setWidths,
      isError: isError,
      isLoading: isLoading,
      isVertical: isVertical,
      isLabelVertical: isLabelVertical
    })
  }, children);
};

var Connector = /*#__PURE__*/memo(function (_ref) {
  var index = _ref.index,
      isCompletedStep = _ref.isCompletedStep,
      children = _ref.children,
      isLastStep = _ref.isLastStep,
      hasLabel = _ref.hasLabel;

  var _useStyles = useStyles(),
      connector = _useStyles.connector,
      stepIconContainer = _useStyles.stepIconContainer;

  var _useStepsContext = useStepsContext(),
      isVertical = _useStepsContext.isVertical,
      isLabelVertical = _useStepsContext.isLabelVertical,
      widths = _useStepsContext.widths;

  var getMargin = function getMargin() {
    if (isVertical) return "calc(" + stepIconContainer.width + " / 2)";
    if (!hasLabel) return 2;
    return 0;
  };

  var styles = useMemo(function () {
    var base = {
      ms: getMargin(),
      my: isVertical ? 2 : 0,
      ps: isVertical ? 4 : 0,
      me: isVertical || isLabelVertical ? 0 : 2,
      height: isVertical ? 'auto' : '2px',
      alignSelf: isVertical ? 'stretch' : 'auto',
      borderTopWidth: isLastStep || isVertical ? 0 : '2px',
      borderInlineStartWidth: isLastStep || !isVertical ? 0 : '2px',
      minHeight: isLastStep || !isVertical ? 'auto' : '1.5rem'
    };

    if (isLabelVertical) {
      return _extends({}, base, {
        position: 'absolute',
        top: "calc(" + stepIconContainer.height + " / 2  - " + base.height + " / 2)",
        left: "calc(((" + (widths == null ? void 0 : widths[index]) + "px + " + stepIconContainer.width + ") / 2) + 8px)",
        // use index of next step to determine spacing
        right: "calc((" + (widths == null ? void 0 : widths[index + 1]) + "px - " + stepIconContainer.width + ") / -2 + 8px)"
      });
    }

    return base;
  }, [widths, isLabelVertical, isVertical, stepIconContainer.height, stepIconContainer.width]);
  return createElement(chakra.div, {
    __css: _extends({}, styles, connector),
    "data-highlighted": dataAttr(isCompletedStep)
  }, isVertical && children);
});

var CheckIcon = /*#__PURE__*/createIcon({
  viewBox: '0 0 14 14',
  path: /*#__PURE__*/createElement("g", {
    fill: "currentColor"
  }, /*#__PURE__*/createElement("polygon", {
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }))
});

var CloseIcon = /*#__PURE__*/createIcon({
  displayName: 'CloseIcon',
  d: 'M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z'
});

var MotionFlex = /*#__PURE__*/motion(Flex);
var AnimatedCloseIcon = /*#__PURE__*/motion(CloseIcon);
var AnimatedSpan = /*#__PURE__*/motion(chakra$1.span);
var animationConfig = {
  transition: {
    duration: 0.25
  },
  exit: {
    scale: 0.5,
    opacity: 0
  },
  initial: {
    scale: 0.5,
    opacity: 0
  },
  animate: {
    scale: 1,
    opacity: 1
  }
};
var StepIcon = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useStyles = useStyles$1(),
      icon = _useStyles.icon,
      label = _useStyles.label;

  var isCompletedStep = props.isCompletedStep,
      isCurrentStep = props.isCurrentStep,
      isError = props.isError,
      isLoading = props.isLoading,
      CustomIcon = props.icon,
      index = props.index,
      CustomCheckIcon = props.checkIcon;

  var labelStyles = _extends({
    fontWeight: 'medium',
    color: mode("gray.900", "gray.100")(props),
    textAlign: 'center',
    fontSize: 'md'
  }, label);

  var Icon = React__default.useMemo(function () {
    return CustomIcon ? CustomIcon : null;
  }, [CustomIcon]);
  var Check = React__default.useMemo(function () {
    return CustomCheckIcon ? CustomCheckIcon : CheckIcon;
  }, [CustomCheckIcon]);
  return React__default.useMemo(function () {
    if (isCompletedStep) {
      return React__default.createElement(MotionFlex, Object.assign({
        key: "check-icon"
      }, animationConfig), React__default.createElement(Check, {
        color: "white",
        style: icon
      }));
    }

    if (isCurrentStep) {
      if (isError) return React__default.createElement(AnimatedCloseIcon, Object.assign({
        key: "icon",
        color: "white"
      }, animationConfig, {
        style: icon
      }));
      if (isLoading) return React__default.createElement(Spinner, {
        width: icon.width,
        height: icon.height
      });
    }

    if (Icon) return React__default.createElement(MotionFlex, Object.assign({
      key: "step-icon"
    }, animationConfig), React__default.createElement(Icon, {
      style: icon
    }));
    return React__default.createElement(AnimatedSpan, Object.assign({
      ref: ref,
      key: "label",
      __css: labelStyles
    }, animationConfig), (index || 0) + 1);
  }, [isCompletedStep, isCurrentStep, isError, isLoading, Icon, icon]);
});

var StepLabel = function StepLabel(_ref) {
  var isCurrentStep = _ref.isCurrentStep,
      opacity = _ref.opacity,
      label = _ref.label,
      description = _ref.description;

  var _useStyles = useStyles$1(),
      labelContainer = _useStyles.labelContainer,
      labelStyles = _useStyles.label,
      descriptionStyles = _useStyles.description;

  var _useStepsContext = useStepsContext(),
      isLabelVertical = _useStepsContext.isLabelVertical;

  var shouldRender = !!label || !!description;
  return shouldRender ? React__default.createElement(chakra$1.div, {
    "aria-current": isCurrentStep ? 'step' : undefined,
    __css: _extends({
      textAlign: isLabelVertical ? 'center' : 'left',
      alignItems: isLabelVertical ? 'center' : 'flex-start'
    }, labelContainer)
  }, !!label && React__default.createElement(chakra$1.span, {
    __css: _extends({
      mx: isLabelVertical ? 0 : 2,
      mt: isLabelVertical ? 1 : 0,
      opacity: opacity
    }, labelStyles)
  }, label), !!description && React__default.createElement(chakra$1.span, {
    __css: _extends({
      mx: isLabelVertical ? 0 : 2,
      mt: isLabelVertical ? 2 : 0,
      opacity: opacity
    }, descriptionStyles)
  }, description)) : null;
};

var _excluded = ["children", "description", "icon", "index", "isCompletedStep", "isCurrentStep", "isLastStep", "label"];
var Step = /*#__PURE__*/forwardRef$1(function (props, ref) {
  var children = props.children,
      description = props.description,
      icon = props.icon,
      index = props.index,
      isCompletedStep = props.isCompletedStep,
      isCurrentStep = props.isCurrentStep,
      isLastStep = props.isLastStep,
      label = props.label,
      styleProps = _objectWithoutPropertiesLoose(props, _excluded);

  var _useStepsContext = useStepsContext(),
      isVertical = _useStepsContext.isVertical,
      isError = _useStepsContext.isError,
      isLoading = _useStepsContext.isLoading,
      isLabelVertical = _useStepsContext.isLabelVertical,
      checkIcon = _useStepsContext.checkIcon,
      onClickStep = _useStepsContext.onClickStep,
      clickable = _useStepsContext.clickable,
      setWidths = _useStepsContext.setWidths,
      stepCount = _useStepsContext.stepCount;

  var _useStyles = useStyles(),
      step = _useStyles.step,
      stepContainer = _useStyles.stepContainer,
      stepIconContainer = _useStyles.stepIconContainer;

  var hasVisited = isCurrentStep || isCompletedStep;
  var opacity = hasVisited ? 1 : 0.8;

  var handleClick = function handleClick(index) {
    if (clickable && onClickStep) {
      onClickStep(index);
    }
  };

  var containerRef = createRef();
  useEffect(function () {
    if (containerRef && containerRef.current && setWidths) {
      setWidths(function (prev) {
        var _containerRef$current2;

        if (prev.length === stepCount) {
          var _containerRef$current;

          return [((_containerRef$current = containerRef.current) == null ? void 0 : _containerRef$current.offsetWidth) || 0];
        }

        return [].concat(prev, [((_containerRef$current2 = containerRef.current) == null ? void 0 : _containerRef$current2.offsetWidth) || 0]);
      });
    }
  }, [stepIconContainer.width, stepIconContainer.height]);
  return createElement(Fragment, null, createElement(chakra.div, Object.assign({
    ref: ref,
    onClick: function onClick() {
      return handleClick(index);
    },
    "aria-disabled": !hasVisited,
    __css: _extends({
      opacity: opacity,
      flexDir: isVertical ? 'column' : 'row',
      alignItems: isVertical || isLabelVertical ? 'flex-start' : 'center',
      flex: isLastStep && !isVertical ? '0 0 auto' : '1 0 auto',
      justifyContent: isLastStep && !isVertical ? 'flex-end' : 'flex-start',
      _hover: {
        cursor: clickable ? 'pointer' : 'default'
      }
    }, step)
  }, styleProps), createElement(chakra.div, {
    ref: containerRef,
    __css: _extends({
      flexDir: isLabelVertical ? 'column' : 'row'
    }, stepContainer)
  }, createElement(chakra.div, {
    __css: stepIconContainer,
    "aria-current": isCurrentStep ? 'step' : undefined,
    "data-invalid": dataAttr(isCurrentStep && isError),
    "data-highlighted": dataAttr(isCompletedStep),
    "data-clickable": dataAttr(clickable)
  }, createElement(AnimatePresence, {
    exitBeforeEnter: true
  }, createElement(StepIcon, Object.assign({}, {
    index: index,
    isError: isError,
    isLoading: isLoading,
    isCurrentStep: isCurrentStep,
    isCompletedStep: isCompletedStep
  }, {
    icon: icon,
    checkIcon: checkIcon
  })))), createElement(StepLabel, Object.assign({
    label: label,
    description: description
  }, {
    isCurrentStep: isCurrentStep,
    opacity: opacity
  }))), createElement(Connector, {
    index: index,
    isLastStep: isLastStep,
    hasLabel: !!label || !!description,
    isCompletedStep: isCompletedStep || false
  }, createElement(Collapse, {
    style: {
      width: '100%'
    },
    "in": isCurrentStep
  }, (isCurrentStep || isCompletedStep) && children))));
});

var _excluded$1 = ["className", "activeStep", "children", "orientation", "state", "responsive", "checkIcon", "onClickStep", "labelOrientation"];
var Steps = /*#__PURE__*/forwardRef$1(function (props, ref) {
  var styles = useMultiStyleConfig('Steps', props);

  var stepsStyles = _extends({}, styles.steps);

  var _omitThemingProps = omitThemingProps(props),
      className = _omitThemingProps.className,
      activeStep = _omitThemingProps.activeStep,
      children = _omitThemingProps.children,
      orientationProp = _omitThemingProps.orientation,
      state = _omitThemingProps.state,
      responsive = _omitThemingProps.responsive,
      checkIcon = _omitThemingProps.checkIcon,
      onClickStep = _omitThemingProps.onClickStep,
      labelOrientation = _omitThemingProps.labelOrientation,
      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);

  var childArr = Children.toArray(children);
  var stepCount = childArr.length;

  var renderHorizontalContent = function renderHorizontalContent() {
    if (activeStep <= childArr.length) {
      return Children.map(childArr[activeStep], function (node) {
        if (!isValidElement(node)) return;
        return Children.map(node.props.children, function (childNode) {
          return childNode;
        });
      });
    }

    return null;
  };

  var clickable = !!onClickStep;

  var _useMediaQuery = useMediaQuery('(max-width: 43em)'),
      isMobile = _useMediaQuery[0];

  var orientation = isMobile && responsive ? 'vertical' : orientationProp;
  return createElement(StylesProvider, {
    value: styles
  }, createElement(StepsProvider, {
    value: {
      activeStep: activeStep,
      orientation: orientation,
      state: state,
      responsive: responsive,
      checkIcon: checkIcon,
      onClickStep: onClickStep,
      labelOrientation: labelOrientation,
      clickable: clickable,
      colorScheme: props.colorScheme,
      stepCount: stepCount
    }
  }, createElement(chakra.div, Object.assign({
    ref: ref,
    __css: _extends({
      justifyContent: stepCount === 1 ? 'flex-end' : 'space-between',
      flexDir: orientation === 'vertical' ? 'column' : 'row'
    }, stepsStyles),
    className: cx('chakra-steps', className)
  }, rest), Children.map(children, function (child, i) {
    var _ref;

    var isCompletedStep = (_ref = isValidElement(child) && child.props.isCompletedStep) != null ? _ref : i < activeStep;
    var isLastStep = i === stepCount - 1;
    var isCurrentStep = i === activeStep;
    var stepProps = {
      index: i,
      isCompletedStep: isCompletedStep,
      isCurrentStep: isCurrentStep,
      isLastStep: isLastStep
    };

    if (isValidElement(child)) {
      return cloneElement(child, stepProps);
    }

    return null;
  })), orientation === 'horizontal' && renderHorizontalContent()));
});
Steps.defaultProps = {
  activeStep: 0,
  colorScheme: 'green',
  orientation: 'horizontal',
  responsive: true
};

function useSteps(_ref) {
  var initialStep = _ref.initialStep;

  var _React$useState = useState(initialStep),
      activeStep = _React$useState[0],
      setActiveStep = _React$useState[1];

  var nextStep = function nextStep() {
    setActiveStep(function (prev) {
      return prev + 1;
    });
  };

  var prevStep = function prevStep() {
    setActiveStep(function (prev) {
      return prev - 1;
    });
  };

  var reset = function reset() {
    setActiveStep(initialStep);
  };

  var setStep = function setStep(step) {
    setActiveStep(step);
  };

  return {
    nextStep: nextStep,
    prevStep: prevStep,
    reset: reset,
    setStep: setStep,
    activeStep: activeStep
  };
}

var parts = /*#__PURE__*/anatomy('steps').parts('connector', 'description', 'icon', 'label', 'labelContainer', 'step', 'stepContainer', 'stepIconContainer', 'steps');
var baseStyleIcon = {
  strokeWidth: '2px'
};

var baseStyleLabel = function baseStyleLabel(props) {
  return {
    color: mode("gray.900", "gray.100")(props),
    fontWeight: 'medium',
    textAlign: 'center',
    fontSize: 'md'
  };
};

var baseStyleDescription = function baseStyleDescription(props) {
  return {
    color: mode("gray.800", "gray.200")(props),
    marginTop: '-2px',
    textAlign: 'center',
    fontSize: 'sm'
  };
};

var baseStyleConnector = function baseStyleConnector(props) {
  var c = props.colorScheme;
  var inactiveColor = mode('gray.200', 'gray.700')(props);
  var activeColor = mode(c + ".500", c + ".200")(props);
  return {
    flex: 1,
    display: 'flex',
    borderColor: inactiveColor,
    transitionProperty: 'border-color',
    transitionDuration: 'normal',
    _highlighted: {
      borderColor: activeColor
    }
  };
};

var baseStyleStepIconContainer = function baseStyleStepIconContainer(props) {
  var c = props.colorScheme;
  var inactiveColor = mode('gray.200', 'gray.700')(props);
  var activeColor = c + ".500";
  return {
    display: 'flex',
    borderRadius: '50%',
    alignItems: 'center',
    justifyContent: 'center',
    bg: inactiveColor,
    borderColor: inactiveColor,
    transitionProperty: 'background, border-color',
    transitionDuration: 'normal',
    _activeStep: {
      bg: mode(darken(inactiveColor, 0.5), lighten(inactiveColor, 0.5))(props),
      borderColor: activeColor,
      _invalid: {
        bg: 'red.500',
        borderColor: 'red.500'
      }
    },
    _highlighted: {
      bg: activeColor,
      borderColor: activeColor
    },
    '&[data-clickable]:hover': {
      borderColor: activeColor
    }
  };
};

var baseStyle = function baseStyle(props) {
  return {
    connector: baseStyleConnector(props),
    description: baseStyleDescription(props),
    icon: baseStyleIcon,
    label: baseStyleLabel(props),
    labelContainer: {
      display: 'flex',
      flexDir: 'column',
      justifyContent: 'center'
    },
    step: {
      display: 'flex',
      position: 'relative'
    },
    stepContainer: {
      display: 'flex',
      alignItems: 'center'
    },
    stepIconContainer: baseStyleStepIconContainer(props),
    steps: {
      fontFamily: 'heading',
      textAlign: 'center',
      width: '100%',
      display: 'flex',
      flex: 1
    }
  };
};

var sizes = {
  sm: {
    stepIconContainer: {
      width: '32px',
      height: '32px',
      borderWidth: '2px'
    },
    icon: {
      width: '14px',
      height: '14px'
    },
    label: {
      fontWeight: 'medium',
      textAlign: 'center',
      fontSize: 'sm'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'xs'
    }
  },
  md: {
    stepIconContainer: {
      width: '40px',
      height: '40px',
      borderWidth: '2px'
    },
    icon: {
      width: '18px',
      height: '18px'
    },
    label: {
      fontWeight: 'medium',
      textAlign: 'center',
      fontSize: 'md'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'sm'
    }
  },
  lg: {
    stepIconContainer: {
      width: '48px',
      height: '48px',
      borderWidth: '2px'
    },
    icon: {
      width: '22px',
      height: '22px'
    },
    label: {
      fontWeight: 'bold',
      textAlign: 'center',
      fontSize: 'lg'
    },
    description: {
      fontWeight: '300',
      textAlign: 'center',
      fontSize: 'md'
    }
  }
};
var defaultProps = {
  size: 'md',
  colorScheme: 'green'
};
var StepsStyleConfig = {
  parts: parts.keys,
  baseStyle: baseStyle,
  sizes: sizes,
  defaultProps: defaultProps
};

export { Step, Steps, StepsStyleConfig, useSteps };
//# sourceMappingURL=chakra-ui-steps.esm.js.map
